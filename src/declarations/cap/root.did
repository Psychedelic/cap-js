type Event = record {
  to : principal;
  fee : nat64;
  from : opt principal;
  memo : nat32;
  time : nat64;
  operation : Operation;
  caller : principal;
  amount : nat64;
};
type GetBucketResponse = record { witness : opt Witness; canister : principal };
type GetNextCanistersResponse = record {
  witness : opt Witness;
  canisters : vec principal;
};
type GetTransactionResponse = variant {
  Delegate : record { principal; opt Witness };
  Found : record { opt Event; opt Witness };
};
type GetTransactionsArg = record { page : opt nat32; witness : bool };
type GetTransactionsResponseBorrowed = record {
  data : vec Event;
  page : nat32;
  witness : opt Witness;
};
type GetUserTransactionsArg = record {
  page : opt nat32;
  user : principal;
  witness : bool;
};
type IndefiniteEvent = record {
  to : principal;
  fee : nat64;
  from : opt principal;
  memo : nat32;
  operation : Operation;
  caller : principal;
  amount : nat64;
};
type Operation = variant { Approve; Burn; Mint; Transfer };
type WithIdArg = record { id : nat64; witness : bool };
type WithWitnessArg = record { witness : bool };
type Witness = record { certificate : vec nat8; tree : vec nat8 };
service : {
  get_bucket_for : (WithIdArg) -> (GetBucketResponse) query;
  get_next_canisters : (WithWitnessArg) -> (GetNextCanistersResponse) query;
  get_transaction : (WithIdArg) -> (GetTransactionResponse) query;
  get_transactions : (GetTransactionsArg) -> (
      GetTransactionsResponseBorrowed,
    ) query;
  get_user_transactions : (GetUserTransactionsArg) -> (
      GetTransactionsResponseBorrowed,
    ) query;
  insert : (IndefiniteEvent) -> (nat64) query;
  time : () -> (nat64) query;
}